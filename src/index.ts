import { app, BrowserWindow, ipcMain } from 'electron';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
declare const CHILD_WINDOW_WEBPACK_ENTRY: string;
declare const CHILD_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

let mainWindow: BrowserWindow
const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 400,
    width: 500,
    show: false,
    frame: false,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // mainWindow.setWindowButtonVisibility(true)

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  mainWindow.on('ready-to-show', () => {
    mainWindow.show()
  })

  ipcMain.on('close-app', () => {
    mainWindow.close()
  })

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

ipcMain.on('open-child-win', (ev, data) => {
  const child_win = new BrowserWindow({
    height: 300,
    width: 400,
    show: false,
    frame: false,
    alwaysOnTop: true,
    webPreferences: {
      preload: CHILD_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  child_win.loadURL(CHILD_WINDOW_WEBPACK_ENTRY);

  // document.onreadstatechange
  child_win.on('ready-to-show', () => {
    child_win.show()
    mainWindow.hide()
    console.log("data", data);    
  })

  child_win.on('show', () => {
    child_win.webContents.send('tasks-data', data)
  })

  child_win.on('closed', () => {
    console.log("child win I have closed");
    mainWindow.show()
  })

})

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
